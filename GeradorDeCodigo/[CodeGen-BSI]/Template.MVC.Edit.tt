<#@ template debug="true" hostSpecific="true" #>
<#@ property name="NameSpace" type="System.String" processor="PropertyProcessor" #>
<#@ property name="MyMetaDomainConverterWrapper" type="Oragon.CodeGen.MetaData.MyMetaDomainConverterWrapper, Oragon.CodeGen.MetaData.Domain" processor="PropertyProcessor" #>
<#@ property name="EntityTableName" type="System.String" processor="PropertyProcessor" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly Name="Oragon.CodeGen.MetaData.DataBase.dll" #>
<#@ Assembly Name="Oragon.CodeGen.MetaData.Domain.dll" #>
<#@ Assembly Name="MyGenUtility.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Oragon.CodeGen.MetaData.Domain" #>
<#@ import namespace="Oragon.CodeGen.MetaData.DataBase" #>
<#@ import namespace="MyGeneration" #>
<# 		DomainModel domainModel = MyMetaDomainConverterWrapper.GetModel();
		Entity currentEntity = domainModel.Entities.Where(it => it.Table.Name == EntityTableName).First();
		List<string> expression = new List<string>();
		List<Oragon.CodeGen.MetaData.Domain.Property> propertiesToMap = new List<Oragon.CodeGen.MetaData.Domain.Property>(currentEntity.Properties);		
		List<IColumn> pkColumns = currentEntity.Table.PrimaryKeys.ToList();
		List<string> getFirstByReSendArgumentList = new List<string>();
		foreach(IColumn currentPKColumn in pkColumns)
		{
			Oragon.CodeGen.MetaData.Domain.ValueTypeProperty propValueTypeProperty = GetPropertyByColumn(propertiesToMap, currentPKColumn, false) as Oragon.CodeGen.MetaData.Domain.ValueTypeProperty;
			if(propValueTypeProperty != null)
			{
				getFirstByReSendArgumentList.Add(string.Format(@"{0} = Model.{1}", FirstLower(propValueTypeProperty.Name), propValueTypeProperty.Name) );
			}
		}
		
		string pkMethodArgumentsResend = string.Join(", ", getFirstByReSendArgumentList);
		
		
#>@using SCAFplusNET.Core.Extension.Web.Mvc
@using WebSCAFplus_NET.Architecture.Web.Mvc.ScafGridNovo
@using WebSCAFplus_NET.Architecture.Web.Mvc.ScafGridNovo.Model
@using System
@model WebSCAFplus_NET.Business.Entity.<#=currentEntity.Name#>
@using (Html.BeginForm())
{
<fieldset>
	<legend><#=currentEntity.Name#></legend>
<#		foreach (Oragon.CodeGen.MetaData.Domain.Property currentProperty in currentEntity.Properties.Where(it => (it is ManyToOneProperty) == false))
		{
#>	<div class="display-label"><#=currentProperty.Name#></div>
	<div class="display-field">
		@Html.EditorFor(model => model.<#=currentProperty.Name#>)
	</div>
<#
		}
#>	<input type="submit" value="Salvar" />
</fieldset>
}
<p>
	@Html.ActionLink("Detalhes", "Details", new { <#=pkMethodArgumentsResend#> }) |
    @Html.ActionLink("Voltar para lista", "Index")
</p>
<#+  
	//################################################################################################################################################################################################################################################### 
	//###################################################################################################################################################################################################################################################
	
	public string FirstLower(string value)
	{
		string str = value.Substring(0, 1).ToLower() + value.Substring(1, value.Length - 1);
		return str;
	}
	
	public string FirstUpper(string value)
	{
		string str = value.Substring(0, 1).ToUpper() + value.Substring(1, value.Length - 1);
		return str;
	}

	public Entity GetEntityByTable(DomainModel domain, ITable table)
	{
		return domain.Entities.Where(it => it.Table.Name == table.Name).First();
	}

	public Oragon.CodeGen.MetaData.Domain.Property GetPropertyByColumn(List<Oragon.CodeGen.MetaData.Domain.Property> properties, IColumn column, bool remove)
	{
		Oragon.CodeGen.MetaData.Domain.Property returnValue = GetPropertyByColumn(properties, column);
		if(remove)
		{
			properties.Remove(returnValue);
		}
		return returnValue;
	}
	
	public string FormatAnd(string factoryName, string leftExpression, string rightExpression)
	{
		
		return string.Format(@"
							{0}.And(
									{1}
									, 
									{2}
							)", factoryName, leftExpression, rightExpression);
	}
	
	
	public string FormatAnd(string factoryName, List<string> expressionList)
	{
		string returnValue = null;
		string leftExpression = expressionList[0];
		expressionList.RemoveAt(0);
		if(expressionList.Count == 0)
			returnValue = leftExpression.Replace("[it]", factoryName);
		else
		{
			string rightExpression = this.FormatAnd(factoryName, expressionList);
			returnValue =  this.FormatAnd(factoryName, leftExpression.Replace("[it]", factoryName), rightExpression.Replace("[it]", factoryName));
		}
		return returnValue;
	} 
	
	
	

	public Oragon.CodeGen.MetaData.Domain.Property GetPropertyByColumn(List<Oragon.CodeGen.MetaData.Domain.Property> properties, IColumn column)
	{
		Oragon.CodeGen.MetaData.Domain.Property returnValue = null;
		
		foreach (Oragon.CodeGen.MetaData.Domain.Property currentProperty in properties)
		{
			if (currentProperty is OneToManyProperty)
			{
				OneToManyProperty propOneToManyProperty = (OneToManyProperty)currentProperty;
				if (propOneToManyProperty.ForeignKey.PrimaryColumns.Contains(column))
				{
					returnValue = currentProperty;
					break;
				}
			}
			else if (currentProperty is ManyToOneProperty)
			{
				ManyToOneProperty propManyToOneProperty = (ManyToOneProperty)currentProperty;
				if(propManyToOneProperty.ForeignKey.ForeignColumns.Select(it => it.Name).Contains(column.Name))
				{
					returnValue = currentProperty;
					break;
				}
			}
			else if (currentProperty is ManyToManyProperty)
			{
				ManyToManyProperty propManyToManyProperty = (ManyToManyProperty)currentProperty;
				if(propManyToManyProperty.LeftForeignKey.PrimaryColumns.Contains(column))
				{
					returnValue = currentProperty;
					break;
				}
			}
			else if (currentProperty is ValueTypeProperty)
			{
				ValueTypeProperty propValueTypeProperty = (ValueTypeProperty)currentProperty;
				if(propValueTypeProperty.Column == column)
				{
					returnValue = currentProperty;
					break;
				}				
			}

		}
		return returnValue;
	}

	public string GenReaderMethod(Oragon.CodeGen.MetaData.Domain.ValueTypeProperty propValueTypeProperty)
	{
		string pattern = "[Instance].[MethodName]([Arguments])";
		string patternValue_Instance = "reader";
		string patternValue_MethodName = "Get" + this.FirstUpper(propValueTypeProperty.Type
			.Replace("int", "Int32")
			.Replace("short", "Int16")
			.Replace("bool", "Boolean")
			.Replace("long", "Int64")
			.Replace("byte[]", "Bytes")
			.Replace("?","")
		);
		string patternValue_Arguments = string.Format(@"reader.GetOrdinal(""{0}"")", propValueTypeProperty.Column.Name);
		
		return 	pattern
			.Replace("[Instance]", patternValue_Instance)	
			.Replace("[MethodName]", patternValue_MethodName)
			.Replace("[Arguments]", patternValue_Arguments);
	}
	
	
	
#>