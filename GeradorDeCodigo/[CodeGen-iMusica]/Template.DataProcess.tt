<#@ template debug="true" hostSpecific="true" #>
<#@ property name="NameSpace" type="System.String" processor="PropertyProcessor" #>
<#@ property name="MyMetaDomainConverterWrapper" type="Oragon.CodeGen.MetaData.MyMetaDomainConverterWrapper, Oragon.CodeGen.MetaData.Domain" processor="PropertyProcessor" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly Name="Oragon.CodeGen.MetaData.DataBase.dll" #>
<#@ Assembly Name="Oragon.CodeGen.MetaData.Domain.dll" #>
<#@ Assembly Name="MyGenUtility.dll" #>
<#@ import namespace="System" #><#@ import namespace="System.IO" #><#@ import namespace="System.Diagnostics" #><#@ import namespace="System.Linq" #><#@ import namespace="System.Xml.Linq" #><#@ import namespace="System.Collections" #><#@ import namespace="System.Collections.Generic" #><#@ import namespace="Oragon.CodeGen.MetaData.Domain" #><#@ import namespace="Oragon.CodeGen.MetaData.Domain" #><#@ import namespace="Oragon.CodeGen.MetaData.DataBase" #><#@ import namespace="MyGeneration" #>
<#   
	DomainModel domain = MyMetaDomainConverterWrapper.GetModel();
	
	//System.Diagnostics.Debugger.Launch();
#>using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using Oragon.Architecture.Data.Process;


namespace <#=NameSpace#>.Process
{

<#	foreach (Entity currentEntity in domain.Entities)
	{
#>
	public partial class <#= currentEntity.Name #>DataProcess : DataProcessBase<<#=NameSpace#>.Entity.<#=currentEntity.Name#>>
	{

		/// <summary>
		/// Obtém uma lista com todas as instâncias de <#=currentEntity.Name#>.
		/// </summary>
		/// <returns>Lista com ocorrência de <#=currentEntity.Name#>.</returns>
		public IList<<#=NameSpace#>.Entity.<#=currentEntity.Name#>> GetAll<#=currentEntity.PluralName#>()
		{
			return base.InternalGetAll();
		}
		
	<# if(domain.CanInsert){ #>
		/// <summary>
		/// Realiza a inclusão de um <#=currentEntity.Name#> no banco de dados.
		/// </summary>
		/// <param name="entity">Instância de <#=currentEntity.Name#> para inclusão.</param>
		public void Save(<#=NameSpace#>.Entity.<#=currentEntity.Name#> entity)
		{
			base.InternalSave(entity);
		}

	<# } 
	if(domain.CanInsert && domain.CanUpdate){ #>
		/// <summary>
		/// Realiza a inclusão ou alteração de um <#=currentEntity.Name#> no banco de dados.
		/// </summary>
		/// <param name="entity">Instância de <#=currentEntity.Name#> para altaração.</param>
		public void SaveOrUpdate(<#=NameSpace#>.Entity.<#=currentEntity.Name#> entity)
		{
			base.InternalSaveOrUpdate(entity);
		}

	<# } 
	if(domain.CanUpdate){ #>
		/// <summary>
		/// Realiza a alteração de um <#=currentEntity.Name#> no banco de dados.
		/// </summary>
		/// <param name="entity">Instância de <#=currentEntity.Name#> para altaração.</param>
		public void Update(<#=NameSpace#>.Entity.<#=currentEntity.Name#> entity)
		{
			base.InternalUpdate(entity);
		}

	<# } 
	if(domain.CanDelete){ #>
		/// <summary>
		/// Realiza a exclusão de um <#=currentEntity.Name#> no banco de dados.
		/// </summary>
		/// <param name="entity">Instância de <#=currentEntity.Name#>  para exclusão.</param>
		public void Delete(<#=NameSpace#>.Entity.<#=currentEntity.Name#> entity)
		{
			base.InternalDelete(entity);
		}

	<# } #>	
		/// <summary>
		/// Realiza uma consulta simples com base na expressão do usuário, retornando um único <#=currentEntity.Name#> a partir do banco de dados.
		/// </summary>
		/// <param name="predicate">Expressão a ser executada</param>
		/// <returns>Retorna nulo ou uma instância de <#=currentEntity.Name#> de acordo com o filtro executado</returns>
		public <#=NameSpace#>.Entity.<#=currentEntity.Name#> GetFirstBy(Expression<Func<<#=NameSpace#>.Entity.<#=currentEntity.Name#>, bool>> predicate)
		{
			<#=NameSpace#>.Entity.<#=currentEntity.Name#> returnValue = this.InternalGetFirstBy(predicate);
			return returnValue;
		}
		
		/// <summary>
		/// Realiza uma consulta simples com base na expressão do usuário, retornando uma lista de <#=currentEntity.Name#> a partir do banco de dados.
		/// </summary>
		/// <param name="predicate">Expressão a ser executada</param>
		/// <returns>Retorna uma lista vazia ou preenchida com instâncias de <#=currentEntity.Name#> de acordo com o filtro executado</returns>
		public IList<<#=NameSpace#>.Entity.<#=currentEntity.Name#>> GetListBy(Expression<Func<<#=NameSpace#>.Entity.<#=currentEntity.Name#>, bool>> predicate)
		{
			IList<<#=NameSpace#>.Entity.<#=currentEntity.Name#>> returnValue = this.InternalGetListBy(predicate);
			return returnValue;
		}

	}
<# 
}		
#>	
}

<#+  
 
	public string FirstLower(string value)
	{
		string str = value.Substring(0, 1).ToLower() + value.Substring(1, value.Length - 1);
		return str;
	}

	public Entity GetEntityByTable(DomainModel domain, ITable table)
	{
		return domain.Entities.Where(it => it.Table.Name == table.Name).First();
	}


	
#>