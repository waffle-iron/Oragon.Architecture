<#@ template debug="true" hostSpecific="true" #>
<#@ property name="NameSpace" type="System.String" processor="PropertyProcessor" #>
<#@ property name="MyMetaDomainConverterWrapper" type="Oragon.CodeGen.MetaData.MyMetaDomainConverterWrapper, Oragon.CodeGen.MetaData.Domain" processor="PropertyProcessor" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly Name="Oragon.CodeGen.MetaData.DataBase.dll" #>
<#@ Assembly Name="Oragon.CodeGen.MetaData.Domain.dll" #>
<#@ Assembly Name="MyGenUtility.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Oragon.CodeGen.MetaData.Domain" #>
<#@ import namespace="Oragon.CodeGen.MetaData.Domain" #>
<#@ import namespace="Oragon.CodeGen.MetaData.DataBase" #>
<#@ import namespace="MyGeneration" #>
<#	DomainModel domain = MyMetaDomainConverterWrapper.GetModel();
	
	//System.Diagnostics.Debugger.Launch();
#>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Serialization;
using DbExpressions;
using <#=NameSpace#>.Architecture.Data;
using <#=NameSpace#>.Architecture.Data.Process;
using <#=NameSpace#>.Business.Entity;


namespace <#=NameSpace#>.Data.Process
{
<#	foreach (Entity currentEntity in domain.Entities)
	{
		List<string> expression = new List<string>();
		List<Oragon.CodeGen.MetaData.Domain.Property> propertiesToMap = new List<Oragon.CodeGen.MetaData.Domain.Property>(currentEntity.Properties);		
		List<IColumn> pkColumns = currentEntity.Table.PrimaryKeys.ToList();
		List<string> getFirstByArgumentList = new List<string>();
		List<string> getFirstByWhereList = new List<string>();
		List<string> updateWhereList = new List<string>();
		foreach(IColumn currentPKColumn in pkColumns)
		{
			Oragon.CodeGen.MetaData.Domain.ValueTypeProperty propValueTypeProperty = GetPropertyByColumn(propertiesToMap, currentPKColumn, false) as Oragon.CodeGen.MetaData.Domain.ValueTypeProperty;
			if(propValueTypeProperty != null)
			{
				getFirstByArgumentList.Add(string.Concat(propValueTypeProperty.Type, " ", FirstLower(propValueTypeProperty.Name)));
				getFirstByWhereList.Add(string.Format(" [it].Column(\"{0}\") == [it].Constant({1}) ", propValueTypeProperty.Column.Name, FirstLower(propValueTypeProperty.Name)));
				updateWhereList.Add(string.Format(" [it].Column(\"{0}\") == [it].Constant(entity.{1}) ", propValueTypeProperty.Column.Name, propValueTypeProperty.Name));
			}
		}
		
		string pkMethodArguments = string.Join(", ", getFirstByArgumentList);
		
		string pkWhereExpression = this.FormatAnd("it", getFirstByWhereList);
		string pkWhereUpdateExpression = this.FormatAnd("it", updateWhereList);
		
		string selectQueryText = string.Join(", ", (new List<IColumn>(currentEntity.Table.Columns)).Select(it => string.Format(@"f => f.Column(""{0}"")", it.Name)));
		
		
#>
	public partial class <#= currentEntity.Name #>DataProcess : DataProcessBase
	{
		protected virtual DbSelectQuery SelectQuery
		{
			get
			{
				return new DbSelectQuery()
					.Select(<#= selectQueryText #>)
					.From(f => f.Table("<#= currentEntity.Table.Name #>")) as DbSelectQuery;
			}
		}
		
		partial void PreMapping(<#=NameSpace#>.Business.Entity.<#=currentEntity.Name#> objectToMap, IDataReader reader);
		
		partial void PostMapping(<#=NameSpace#>.Business.Entity.<#=currentEntity.Name#> objectToMap, IDataReader reader);
		
		protected <#=NameSpace#>.Business.Entity.<#=currentEntity.Name#> DataReaderToInstance(IDataReader reader)
		{
			<#=NameSpace#>.Business.Entity.<#=currentEntity.Name#> returnValue = new <#=NameSpace#>.Business.Entity.<#=currentEntity.Name#>();
			this.PreMapping(returnValue, reader);
<#
			
			foreach (Oragon.CodeGen.MetaData.Domain.ValueTypeProperty propValueTypeProperty in propertiesToMap)
			{
#>
			if (!reader.IsDBNull(reader.GetOrdinal("<#=propValueTypeProperty.Column.Name#>")))
				returnValue.<#=propValueTypeProperty.Name#> = <#=this.GenReaderMethod(propValueTypeProperty)#>;
<#
			}
#>			this.PostMapping(returnValue, reader);
			return returnValue;
		}
		
		
		public <#=NameSpace#>.Business.Entity.<#=currentEntity.Name#> Obter<#=currentEntity.Name#>(<#= pkMethodArguments #>)
		{
			<#=NameSpace#>.Business.Entity.<#=currentEntity.Name#> returnValue = null;
			IDbCommand command = this.SelectQuery
			.Where(it => <#=pkWhereExpression #>)
			.Translate();
			command.Connection = this.Connection;
			IDataReader reader = command.ExecuteReader();
			if (reader.Read())
				returnValue = this.DataReaderToInstance(reader);
			return returnValue;
		}			

		/// <summary>
		/// Obtém uma lista com todas as instâncias de <#=currentEntity.Name#>.
		/// </summary>
		/// <returns>Lista com ocorrência de <#=currentEntity.Name#>.</returns>
		public List<<#=NameSpace#>.Business.Entity.<#=currentEntity.Name#>> ObterTodos<#=currentEntity.PluralName#>()
		{
			List<<#=NameSpace#>.Business.Entity.<#=currentEntity.Name#>> returnValue = new List<<#=NameSpace#>.Business.Entity.<#=currentEntity.Name#>>();
			IDbCommand command = this.SelectQuery.Translate();
			command.Connection = this.Connection;
			IDataReader reader = command.ExecuteReader();
			while (reader.Read())
				returnValue.Add(this.DataReaderToInstance(reader));
			return returnValue;
		}
		
		/// <summary>
		/// Realiza a inclusão de um <#=currentEntity.Name#> no banco de dados.
		/// </summary>
		/// <param name="entity">Instância de <#=currentEntity.Name#> para inclusão.</param>
		public void Incluir(<#=NameSpace#>.Business.Entity.<#=currentEntity.Name#> entity)
		{
			IDbCommand command = new DbInsertQuery()
			.Insert(it => it.Table("<#=currentEntity.Table.Name#>"))
			.Columns(
<#			foreach (Oragon.CodeGen.MetaData.Domain.ValueTypeProperty propValueTypeProperty in propertiesToMap)
			{
#> 				it => it.Column("<#=propValueTypeProperty.Column.Name#>")<#= propertiesToMap.Last() != propValueTypeProperty? ",":string.Empty #>
<#
			}
#>			).Values(				
<# 			foreach (Oragon.CodeGen.MetaData.Domain.ValueTypeProperty propValueTypeProperty in propertiesToMap)
			{
#> 				it => it.Constant(entity.<#=propValueTypeProperty.Name#>)<#= propertiesToMap.Last() != propValueTypeProperty? ",":string.Empty #>
<#			}
#>
			)
			.Translate();
			command.Connection = this.Connection;
			int qtd = command.ExecuteNonQuery();
			if (qtd != 1)
				throw new InvalidOperationException("Deveria incluir 1 linha");			
		}

		/// <summary>
		/// Realiza a alteração de um <#=currentEntity.Name#> no banco de dados.
		/// </summary>
		/// <param name="entity">Instância de <#=currentEntity.Name#> para altaração.</param>
		public void Alterar(<#=NameSpace#>.Business.Entity.<#=currentEntity.Name#> entity)
		{
			IDbCommand command = new DbUpdateQuery()
			.Update(it => it.Table("<#=currentEntity.Table.Name#>"))
<# 			foreach (Oragon.CodeGen.MetaData.Domain.ValueTypeProperty propValueTypeProperty in propertiesToMap)
			{
#> 				.Set(it => it.Column("<#=propValueTypeProperty.Column.Name#>"), entity.<#=propValueTypeProperty.Name#>)
<#
			}
#>			.Where(it => <#=pkWhereUpdateExpression#>)
			.Translate();
			command.Connection = this.Connection;
			int qtd = command.ExecuteNonQuery();
			if (qtd != 1)
				throw new InvalidOperationException("Deveria alterar 1 linha");
		}

		/// <summary>
		/// Realiza a exclusão de um <#=currentEntity.Name#> no banco de dados.
		/// </summary>
		/// <param name="entity">Instância de <#=currentEntity.Name#>  para exclusão.</param>
		public void Excluir(<#=NameSpace#>.Business.Entity.<#=currentEntity.Name#> entity)
		{
			IDbCommand command = new DbDeleteQuery()
			.Delete(it => it.Table("<#=currentEntity.Table.Name#>"))
			.Where(it => <#=pkWhereUpdateExpression #>)
			.Translate();
			command.Connection = this.Connection;
			int qtd = command.ExecuteNonQuery();
			if (qtd != 1)
				throw new InvalidOperationException("Deveria excluir 1 linha");
		}
		

	}
<# 
}		
#>	
}

<#+  
	//################################################################################################################################################################################################################################################### 
	//###################################################################################################################################################################################################################################################
	
	public string FirstLower(string value)
	{
		string str = value.Substring(0, 1).ToLower() + value.Substring(1, value.Length - 1);
		return str;
	}
	
	public string FirstUpper(string value)
	{
		string str = value.Substring(0, 1).ToUpper() + value.Substring(1, value.Length - 1);
		return str;
	}

	public Entity GetEntityByTable(DomainModel domain, ITable table)
	{
		return domain.Entities.Where(it => it.Table.Name == table.Name).First();
	}

	public Oragon.CodeGen.MetaData.Domain.Property GetPropertyByColumn(List<Oragon.CodeGen.MetaData.Domain.Property> properties, IColumn column, bool remove)
	{
		Oragon.CodeGen.MetaData.Domain.Property returnValue = GetPropertyByColumn(properties, column);
		if(remove)
		{
			properties.Remove(returnValue);
		}
		return returnValue;
	}
	
	public string FormatAnd(string factoryName, string leftExpression, string rightExpression)
	{
		
		return string.Format(@"
							{0}.And(
									{1}
									, 
									{2}
							)", factoryName, leftExpression, rightExpression);
	}
	
	
	public string FormatAnd(string factoryName, List<string> expressionList)
	{
		string returnValue = null;
		string leftExpression = expressionList[0];
		expressionList.RemoveAt(0);
		if(expressionList.Count == 0)
			returnValue = leftExpression.Replace("[it]", factoryName);
		else
		{
			string rightExpression = this.FormatAnd(factoryName, expressionList);
			returnValue =  this.FormatAnd(factoryName, leftExpression.Replace("[it]", factoryName), rightExpression.Replace("[it]", factoryName));
		}
		return returnValue;
	} 
	
	
	

	public Oragon.CodeGen.MetaData.Domain.Property GetPropertyByColumn(List<Oragon.CodeGen.MetaData.Domain.Property> properties, IColumn column)
	{
		Oragon.CodeGen.MetaData.Domain.Property returnValue = null;
		
		foreach (Oragon.CodeGen.MetaData.Domain.Property currentProperty in properties)
		{
			if (currentProperty is OneToManyProperty)
			{
				OneToManyProperty propOneToManyProperty = (OneToManyProperty)currentProperty;
				if (propOneToManyProperty.ForeignKey.PrimaryColumns.Contains(column))
				{
					returnValue = currentProperty;
					break;
				}
			}
			else if (currentProperty is ManyToOneProperty)
			{
				ManyToOneProperty propManyToOneProperty = (ManyToOneProperty)currentProperty;
				if(propManyToOneProperty.ForeignKey.ForeignColumns.Select(it => it.Name).Contains(column.Name))
				{
					returnValue = currentProperty;
					break;
				}
			}
			else if (currentProperty is ManyToManyProperty)
			{
				ManyToManyProperty propManyToManyProperty = (ManyToManyProperty)currentProperty;
				if(propManyToManyProperty.LeftForeignKey.PrimaryColumns.Contains(column))
				{
					returnValue = currentProperty;
					break;
				}
			}
			else if (currentProperty is ValueTypeProperty)
			{
				ValueTypeProperty propValueTypeProperty = (ValueTypeProperty)currentProperty;
				if(propValueTypeProperty.Column == column)
				{
					returnValue = currentProperty;
					break;
				}				
			}

		}
		return returnValue;
	}

	public string GenReaderMethod(Oragon.CodeGen.MetaData.Domain.ValueTypeProperty propValueTypeProperty)
	{
		string pattern = "[Instance].[MethodName]([Arguments])";
		string patternValue_Instance = "reader";
		string patternValue_MethodName = "Get" + this.FirstUpper(propValueTypeProperty.Type
			.Replace("int", "Int32")
			.Replace("short", "Int16")
			.Replace("bool", "Boolean")
			.Replace("long", "Int64")
			.Replace("byte[]", "Bytes")
			.Replace("?","")
		);
		string patternValue_Arguments = string.Format(@"reader.GetOrdinal(""{0}"")", propValueTypeProperty.Column.Name);
		
		return 	pattern
			.Replace("[Instance]", patternValue_Instance)	
			.Replace("[MethodName]", patternValue_MethodName)
			.Replace("[Arguments]", patternValue_Arguments);
	}
	
	
	
#>