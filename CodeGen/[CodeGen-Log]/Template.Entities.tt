<#@ template debug="true" hostSpecific="true" #>
<#@ property name="NameSpace" type="System.String" processor="PropertyProcessor" #>
<#@ property name="MyMetaDomainConverterWrapper" type="Oragon.CodeGen.MetaData.MyMetaDomainConverterWrapper, Oragon.CodeGen.MetaData.Domain" processor="PropertyProcessor" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly Name="Oragon.CodeGen.MetaData.DataBase.dll" #>
<#@ Assembly Name="Oragon.CodeGen.MetaData.Domain.dll" #>
<#@ Assembly Name="MyGenUtility.dll" #>
<#@ import namespace="System" #><#@ import namespace="System.IO" #><#@ import namespace="System.Diagnostics" #><#@ import namespace="System.Linq" #><#@ import namespace="System.Xml.Linq" #><#@ import namespace="System.Collections" #><#@ import namespace="System.Collections.Generic" #><#@ import namespace="Oragon.CodeGen.MetaData.Domain" #><#@ import namespace="Oragon.CodeGen.MetaData.Domain" #><#@ import namespace="Oragon.CodeGen.MetaData.DataBase" #><#@ import namespace="MyGeneration" #> 

<#   
	//System.Diagnostics.Debugger.Launch();
	DomainModel domain = MyMetaDomainConverterWrapper.GetModel();	
	
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;


namespace <#=NameSpace#>.Business.Entity
{

<#	foreach (Entity currentEntity in domain.Entities)
    {
#>
	/// <summary>
	/// Classe <#=currentEntity.Name #>.
	/// </summary>
	[Serializable]
	[DataContract(IsReference=true)]
	public partial class <#= currentEntity.Name #>
	{
		#region "Propriedades"

<#		foreach (Oragon.CodeGen.MetaData.Domain.Property currentProperty in currentEntity.Properties.Where(it => (it is ManyToOneProperty) == false))
        { 
#>		
		/// <summary>
		/// Define ou obtém um(a) <#=currentProperty.Name #> da <#=currentEntity.Name #>.
		/// </summary>
<#
		if (currentProperty is ValueTypeProperty)
		{
#>		/// <remarks>Referencia Coluna <#=currentEntity.Table.Name #>.<#=((ValueTypeProperty)currentProperty).Column.Name #> <#=((ValueTypeProperty)currentProperty).Column.DataTypeNameComplete #> </remarks>
<#
		}
#>		[DataMember]
		public virtual <#=currentProperty.DeclarativeType #> <#=currentProperty.Name #> { <#= currentProperty.PropertyGetAndSet #> }
<#
		}
		foreach (Oragon.CodeGen.MetaData.Domain.Property currentProperty in currentEntity.Properties.Where(it => it is ManyToOneProperty))
        {
			string propName = currentProperty.Name;
			ManyToOneProperty typedProp = (ManyToOneProperty)currentProperty;
			OneToManyProperty fakeRef = new OneToManyProperty(GetEntityByTable(domain, typedProp.ForeignKey.PrimaryTable), typedProp.ForeignKey);
#>		
		/// <summary>
		/// Define ou obtém um(a) <#=propName #> da <#=currentEntity.Name #>.
		/// </summary>
		[DataMember]
		public virtual <#=currentProperty.DeclarativeType #> <#=propName #> { <#= currentProperty.PropertyGetAndSet #> }
<#
		}
#>

		#endregion


		#region Equals/GetHashCode 

<#
			List<IColumn> pkColumns = currentEntity.Table.PrimaryKeys.ToList();
			List<Oragon.CodeGen.MetaData.Domain.Property> propertiesToMap = new List<Oragon.CodeGen.MetaData.Domain.Property>(currentEntity.Properties);
			propertiesToMap = pkColumns.Select(it => GetPropertyByColumn(propertiesToMap, it, true)).ToList();
			List<string> expressions = null;
#>

		public override bool Equals(object obj)
		{
			if (obj == null || !(obj is <#= currentEntity.Name #>))
				return false;
			if (Object.ReferenceEquals(this, obj))
				return true;
			<#= currentEntity.Name #> objTyped = (<#= currentEntity.Name #>)obj;
<#			expressions = propertiesToMap.Select(currentPKProperty => string.Format("(this.{0}.Equals(objTyped.{0}))", currentPKProperty.Name) ).ToList();
			string identityCompareSentense = string.Join(" && ", expressions.ToArray());
#>			bool returnValue = (<#= identityCompareSentense #>);
			return returnValue;
		}

		public override int GetHashCode()
		{
<# 			expressions = propertiesToMap.Select(currentPKProperty => string.Format("this.{0}.GetHashCode()", currentPKProperty.Name) ).ToList();
			string getHashCode = string.Join(" * ", expressions.ToArray());	
#>			return (<#= getHashCode #>);
		}

		#endregion		
<# /* #>
		public virtual <#=NameSpace#>.Business.Entity.<#= currentEntity.Name #> AsSimpleObject()
		{
			<#=NameSpace#>.Business.Entity.<#= currentEntity.Name #> returnObject = new <#=NameSpace#>.Business.Entity.<#= currentEntity.Name #>();
<#
	    foreach (Oragon.CodeGen.MetaData.Domain.Property currentProperty in currentEntity.Properties.Where(it => it is ValueTypeProperty))
		{ 
#>			returnObject.<#=currentProperty.Name#> = this.<#=currentProperty.Name#>;
<#
		}
	    foreach (Oragon.CodeGen.MetaData.Domain.Property currentProperty in currentEntity.Properties.Where(it => it is ManyToOneProperty))
		{ 
#>			returnObject.<#=currentProperty.Name#> = this.<#=currentProperty.Name#>.AsSimpleObject();
<#
		}
#>
			return returnObject;
		}

		public static List<<#=NameSpace#>.Business.Entity.<#= currentEntity.Name #>> ConvertListToSimpleList(IList<<#=NameSpace#>.Business.Entity.<#= currentEntity.Name #>> listToConvert)
		{
			List<<#=NameSpace#>.Business.Entity.<#= currentEntity.Name #>> returnValue = new List<<#=NameSpace#>.Business.Entity.<#= currentEntity.Name #>>(listToConvert.Count);
			foreach(<#=NameSpace#>.Business.Entity.<#= currentEntity.Name #> complexInstance in listToConvert)
			{
				<#=NameSpace#>.Business.Entity.<#= currentEntity.Name #> simpleInstance = complexInstance.AsSimpleObject();
				returnValue.Add(simpleInstance);
			}
			return returnValue;
		}
<# */ #>

	}
<# 
}		
#>	
}
 
<#+  
 
	public string FirstLower(string value)
	{
		string str = value.Substring(0, 1).ToLower() + value.Substring(1, value.Length - 1);
		return str;
	}

	public Entity GetEntityByTable(DomainModel domain, ITable table)
	{
		return domain.Entities.Where(it => it.Table.Name == table.Name).First();
	}

	public Oragon.CodeGen.MetaData.Domain.Property GetPropertyByColumn(List<Oragon.CodeGen.MetaData.Domain.Property> properties, IColumn column, bool remove)
	{
	    Oragon.CodeGen.MetaData.Domain.Property returnValue = GetPropertyByColumn(properties, column);
		if(remove)
		{
			properties.Remove(returnValue);
		}
		return returnValue;
	}

    public Oragon.CodeGen.MetaData.Domain.Property GetPropertyByColumn(List<Oragon.CodeGen.MetaData.Domain.Property> properties, IColumn column)
	{
		Oragon.CodeGen.MetaData.Domain.Property returnValue = null;
		
		foreach (Oragon.CodeGen.MetaData.Domain.Property currentProperty in properties)
		{
	        if (currentProperty is OneToManyProperty)
            {
	            OneToManyProperty propOneToManyProperty = (OneToManyProperty)currentProperty;
                if (propOneToManyProperty.ForeignKey.PrimaryColumns.Contains(column))
                {
					returnValue = currentProperty;
					break;
				}
			}
            else if (currentProperty is ManyToOneProperty)
            {
	            ManyToOneProperty propManyToOneProperty = (ManyToOneProperty)currentProperty;
				if(propManyToOneProperty.ForeignKey.ForeignColumns.Select(it => it.Name).Contains(column.Name))
				{
					returnValue = currentProperty;
					break;
				}
			}
            else if (currentProperty is ManyToManyProperty)
            {
	            ManyToManyProperty propManyToManyProperty = (ManyToManyProperty)currentProperty;
				if(propManyToManyProperty.LeftForeignKey.PrimaryColumns.Contains(column))
				{
					returnValue = currentProperty;
					break;
				}
			}
            else if (currentProperty is ValueTypeProperty)
            {
	            ValueTypeProperty propValueTypeProperty = (ValueTypeProperty)currentProperty;
				if(propValueTypeProperty.Column == column)
				{
					returnValue = currentProperty;
					break;
				}				
			}

		}



		return returnValue;



	}

	
#>