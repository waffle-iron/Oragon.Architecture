<#@ template debug="true" hostSpecific="true" #>
<#@ property name="NameSpace" type="System.String" processor="PropertyProcessor" #>
<#@ property name="MyMetaDomainConverterWrapper" type="Oragon.CodeGen.MetaData.MyMetaDomainConverterWrapper, Oragon.CodeGen.MetaData.Domain" processor="PropertyProcessor" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly Name="Oragon.CodeGen.MetaData.DataBase.dll" #>
<#@ Assembly Name="Oragon.CodeGen.MetaData.Domain.dll" #>
<#@ Assembly Name="MyGenUtility.dll" #>
<#@ import namespace="System" #><#@ import namespace="System.IO" #><#@ import namespace="System.Diagnostics" #><#@ import namespace="System.Linq" #><#@ import namespace="System.Xml.Linq" #><#@ import namespace="System.Collections" #><#@ import namespace="System.Collections.Generic" #><#@ import namespace="Oragon.CodeGen.MetaData.Domain" #><#@ import namespace="Oragon.CodeGen.MetaData.Domain" #><#@ import namespace="Oragon.CodeGen.MetaData.DataBase" #><#@ import namespace="MyGeneration" #>
<#   
	DomainModel domain = MyMetaDomainConverterWrapper.GetModel();
	
	//System.Diagnostics.Debugger.Launch();
#>using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using Oragon.Architecture.Data.Process;


namespace <#=NameSpace#>.Process
{
	public sealed class PersistenceDataProcess : PersistenceDataProcessBase<<#=NameSpace#>.Entity.EntityBase> { }

<#	foreach (Entity currentEntity in domain.Entities)
	{
#>
	public partial class <#= currentEntity.Name #>DataProcess : QueryDataProcess<<#=NameSpace#>.Entity.<#=currentEntity.Name#>>
	{
		

	}
<# 
}		
#>	
}

<#+  
 
	public string FirstLower(string value)
	{
		string str = value.Substring(0, 1).ToLower() + value.Substring(1, value.Length - 1);
		return str;
	}

	public Entity GetEntityByTable(DomainModel domain, ITable table)
	{
		return domain.Entities.Where(it => it.Table.Name == table.Name).First();
	}


	
#>