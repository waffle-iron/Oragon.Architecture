<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TC.CustomTemplating</name>
    </assembly>
    <members>
        <member name="T:TC.CustomTemplating.AppDomainManager">
            <summary>
            AppDomain managing object.
            </summary>
        </member>
        <member name="T:TC.CustomTemplating.IAppDomainManager">
            <summary>
            AppDomain managing object.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.IAppDomainManager.Unload(System.AppDomain)">
            <summary>
            Unloads the specified app domain.
            </summary>
            <param name="appDomain">The app domain that will be unloaded.</param>
        </member>
        <member name="M:TC.CustomTemplating.IAppDomainManager.Create(System.String)">
            <summary>
            Creates the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>The newly created AppDomain</returns>
        </member>
        <member name="M:TC.CustomTemplating.AppDomainManager.Create(System.String)">
            <summary>
            Create a new AppDomain with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>The newly created AppDomain</returns>
        </member>
        <member name="M:TC.CustomTemplating.AppDomainManager.Unload(System.AppDomain)">
            <summary>
            Unloads the specified app domain.
            </summary>
            <param name="appDomain">The app domain that will be unloaded.</param>
        </member>
        <member name="T:TC.CustomTemplating.TextTransformer">
            <summary>
            Transforms templates in the current AppDomain.
            </summary>
        </member>
        <member name="T:TC.CustomTemplating.TextTransformerBase">
            <summary>
            Basses class for text transformer implementations.
            </summary>
        </member>
        <member name="T:TC.CustomTemplating.ITextTransformer">
            <summary>
            Defines a TextTransformer used to transform templates.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.ITextTransformer.Transform(System.String)">
            <summary>
            Transforms the specified template without using an argument.
            </summary>
            <param name="templateSource">The template.</param>
            <exception cref="T:TC.CustomTemplating.TextTransformationException">Text transformation has failed.</exception>
            <exception cref="T:System.ArgumentNullException">template is null or empty.</exception>
            <returns>The output of the text transformation.</returns>
        </member>
        <member name="M:TC.CustomTemplating.ITextTransformer.Transform(System.String,System.String,System.Object)">
            <summary>
            Transforms the specified template using a single named argument.
            </summary>
            <param name="templateSource">The template.</param>
            <param name="argumentName">The argument name used to transform the text.</param>
            <param name="argumentValue">The argument value used to transform the text. Can be null.</param>
            <exception cref="T:TC.CustomTemplating.TextTransformationException">Text transformation has failed.</exception>
            <exception cref="T:System.ArgumentNullException">template is null or empty.</exception>
            <returns>The output of the text transformation.</returns>
        </member>
        <member name="M:TC.CustomTemplating.ITextTransformer.Transform(System.String,TC.CustomTemplating.TemplateArgumentCollection)">
            <summary>
            Transforms the specified template using a dictionary of named arguments.
            </summary>
            <param name="templateSource">The template.</param>
            <param name="arguments">A dictionary containing named arguments used to transform the text.</param>
            <exception cref="T:TC.CustomTemplating.TextTransformationException">Text transformation has failed.</exception>
            <exception cref="T:System.ArgumentNullException">template is null or empty.</exception>
            <returns>The output of the text transformation.</returns>
        </member>
        <member name="E:TC.CustomTemplating.ITextTransformer.ClassDefinitionGenerated">
            <summary>
            Event raised when the template class definition is genereated.
            </summary>
        </member>
        <member name="P:TC.CustomTemplating.ITextTransformer.AppDomain">
            <summary>
            Gets the app domain used for the transformation.
            </summary>
        </member>
        <member name="P:TC.CustomTemplating.ITextTransformer.AssemblyReferences">
            <summary>
            Gets the assembly references used to compile the templates.
            </summary>
            <value>The assembly references.</value>
        </member>
        <member name="P:TC.CustomTemplating.ITextTransformer.Path">
            <summary>
            Gets the path wherin the assemblies and or included templates can be found.
            </summary>
            <value>The path.</value>
        </member>
        <member name="M:TC.CustomTemplating.TextTransformerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TC.CustomTemplating.TextTransformerBase"/> class.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.TextTransformerBase.#ctor(TC.CustomTemplating.ITextTransformerHost,Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:TC.CustomTemplating.TextTransformerBase"/> class.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.TextTransformerBase.Transform(System.String)">
            <summary>
            Transforms the specified template without using an argument.
            </summary>
            <param name="templateSource">The template.</param>
            <exception cref="T:TC.CustomTemplating.TextTransformationException">Text transformation has failed.</exception>
            <exception cref="T:System.ArgumentNullException">template is null or empty.</exception>
            <returns>The output of the text transformation.</returns>
        </member>
        <member name="M:TC.CustomTemplating.TextTransformerBase.Transform(System.String,System.String,System.Object)">
            <summary>
            Transforms the specified template using a single named argument.
            </summary>
            <param name="templateSource">The template.</param>
            <param name="argumentName">The argument name used to transform the text.</param>
            <param name="argumentValue">The argument value used to transform the text. Can be null.</param>
            <exception cref="T:TC.CustomTemplating.TextTransformationException">Text transformation has failed.</exception>
            <exception cref="T:System.ArgumentNullException">template is null or empty.</exception>
            <returns>The output of the text transformation.</returns>
        </member>
        <member name="M:TC.CustomTemplating.TextTransformerBase.Transform(System.String,TC.CustomTemplating.TemplateArgumentCollection)">
            <summary>
            Transforms the specified template using a dictionary of named arguments.
            </summary>
            <param name="templateSource">The template.</param>
            <param name="arguments">A dictionary containing named arguments used to transform the text.</param>
            <exception cref="T:TC.CustomTemplating.TextTransformationException">Text transformation has failed.</exception>
            <exception cref="T:System.ArgumentNullException">template is null or empty.</exception>
            <returns>The output of the text transformation.</returns>
        </member>
        <member name="M:TC.CustomTemplating.TextTransformerBase.HostClassDefinitionGeneratedHandler(System.Object,TC.CustomTemplating.ClassDefinitionEventArgs)">
            <summary>
            Called when the host has generated the Hosts the class definition.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.TextTransformerBase.OnClassDefinitionGenerated(TC.CustomTemplating.ClassDefinitionEventArgs)">
            <summary>
            Raises the <see cref="E:TC.CustomTemplating.TextTransformerBase.ClassDefinitionGenerated"/> event.
            </summary>
            <param name="e">The <see cref="T:TC.CustomTemplating.ClassDefinitionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:TC.CustomTemplating.TextTransformerBase.StartTransformation(System.String,TC.CustomTemplating.TemplateArgumentCollection)">
            <summary>
            Start the transformation.
            </summary>
            <param name="templateSource">The template source.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
            <exception cref="T:TC.CustomTemplating.TextTransformationException">when an error has occured during transformation.</exception>
        </member>
        <member name="E:TC.CustomTemplating.TextTransformerBase.ClassDefinitionGenerated">
            <summary>
            Event raised when the template class definition is genereated.
            </summary>
        </member>
        <member name="P:TC.CustomTemplating.TextTransformerBase.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:TC.CustomTemplating.TextTransformerBase.AppDomain">
            <summary>
            Gets the app domain used for the transformation.
            </summary>
        </member>
        <member name="P:TC.CustomTemplating.TextTransformerBase.AssemblyReferences">
            <summary>
            Gets the assembly references used to compile the templates.
            </summary>
            <value>The assembly references.</value>
        </member>
        <member name="P:TC.CustomTemplating.TextTransformerBase.Path">
            <summary>
            Gets the path wherin the assemblies and or included templates can be found.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:TC.CustomTemplating.TextTransformer.AppDomain">
            <summary>
            Gets the app domain used for the transformation.
            </summary>
            <value></value>
        </member>
        <member name="T:TC.CustomTemplating.IPathResolver">
            <summary>
            Resolves the path for a given file name.  
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.IPathResolver.ResolvePath(System.String,System.String)">
            <summary>
            Resolves the path for a given file name.  
            </summary>
            <param name="fileName">The file name.</param>
            <param name="hintPath">The transformer path.</param>
            <returns>The full path to the file. Fill name file is not found.</returns>
        </member>
        <member name="T:TC.CustomTemplating.IFileSystem">
            <summary>
            Responsible for accessing the FileSystem.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.IFileSystem.ReadAllText(System.String)">
            <summary>
            Reads all text from a text file.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.IFileSystem.Combine(System.String,System.String)">
            <summary>
            Combines the specified path with the name.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.IFileSystem.FileExists(System.String)">
            <summary>
            Returns whether the file exists.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.IFileSystem.IsPathRooted(System.String)">
            <summary>
            Determines whether the path of the specified file is rooted.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.IFileSystem.GetDirectoryName(System.String)">
            <summary>
            Gets the name of the directory of the specified file name.
            </summary>
        </member>
        <member name="P:TC.CustomTemplating.IFileSystem.EntryAssemblyLocation">
            <summary>
            Gets the location of the entry assembly.
            </summary>
            <value>The entry assembly location.</value>
        </member>
        <member name="T:TC.CustomTemplating.ServiceLocator">
            <summary>
            Very simple ServiceLocator which will instantiate objects and their dependent objects. Each 
            object type is registred by a factory delegate that will be used to construct the object. 
            Arguments of the delegate are automaticly filled in.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.ServiceLocator.#cctor">
            <summary>
            Initializes the <see cref="T:TC.CustomTemplating.ServiceLocator"/> class.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.ServiceLocator.Resolve``1">
            <summary>
            Resolves a specific service and inject the arguments.
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.ServiceLocator.Resolve``2(``1)">
            <summary>
            Resolves a specific service and inject the arguments.
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <returns></returns>
        </member>
        <member name="T:TC.CustomTemplating.Host">
            <summary>
            Custom T4 host that can pass arguments to the transformed
            template. Class is inheriting from MarshalByRefObject so 
            that it is not serialized to another AppDomain. 
            </summary>
        </member>
        <member name="T:TC.CustomTemplating.ITextTransformerHost">
            <summary>
            Defines a Host for a TextTransformer object.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.ITextTransformerHost.Initialize(TC.CustomTemplating.TemplateArgumentCollection)">
            <summary>
            Initializes the host with the specified argument dictionary. 
            This will populate the CallContext with the desired arguments.
            </summary>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:TC.CustomTemplating.ITextTransformerHost.Finish(TC.CustomTemplating.TemplateArgumentCollection)">
            <summary>
            Remove arguments from CallContet and checks whether errors have 
            occured during transformation a throw exception
            when necesssary.
            </summary>
            <exception cref="T:TC.CustomTemplating.TextTransformationException">when an error has occured during transformation.</exception>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="E:TC.CustomTemplating.ITextTransformerHost.ClassDefinitionGenerated">
            <summary>
            Event raised when the template class definition is genereated.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.Host.#ctor(TC.CustomTemplating.ITextTransformer,TC.CustomTemplating.IPathResolver,TC.CustomTemplating.IFileLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:TC.CustomTemplating.Host"/> class.
            </summary>
            <param name="transformer">The transformer.</param>
            <param name="pathResolver">The path resolver.</param>
            <param name="fileLoader">The file loader.</param>
        </member>
        <member name="M:TC.CustomTemplating.Host.GetHostOption(System.String)">
            <summary>
            Gets the host option. The enables communication from engine and
            template by passing object from the host to the called.
            </summary>
            <param name="optionName">Name of the option.</param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.Host.LoadIncludeText(System.String,System.String@,System.String@)">
            <summary>
            Loads the include text.
            </summary>
            <param name="requestFileName">Name of the request file.</param>
            <param name="content">The content.</param>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.Host.LogErrors(System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Log the compilation errors.
            </summary>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:TC.CustomTemplating.Host.ProvideTemplatingAppDomain(System.String)">
            <summary>
            Provides the templating app domain.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.Host.ResolveAssemblyReference(System.String)">
            <summary>
            Resolves the assembly reference.
            </summary>
            <param name="assemblyReference">The assembly reference.</param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.Host.ResolveDirectiveProcessor(System.String)">
            <summary>
            Resolves the property directive processor.
            </summary>
            <param name="processorName">Name of the processor.</param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.Host.ResolveParameterValue(System.String,System.String,System.String)">
            <summary>
            Resolves the parameter value.
            </summary>
            <param name="directiveId">The directive id.</param>
            <param name="processorName">Name of the processor.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.Host.ResolvePath(System.String)">
            <summary>
            Resolves the path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.Host.SetFileExtension(System.String)">
            <summary>
            Sets the file extension.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:TC.CustomTemplating.Host.SetOutputEncoding(System.Text.Encoding,System.Boolean)">
            <summary>
            Sets the output encoding.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.Host.Initialize(TC.CustomTemplating.TemplateArgumentCollection)">
            <summary>
            Initializes the host with the specified argument dictionary. 
            This will populate the CallContext with the desired arguments.
            </summary>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:TC.CustomTemplating.Host.Finish(TC.CustomTemplating.TemplateArgumentCollection)">
            <summary>
            Remove arguments from CallContet and checks whether errors have 
            occured during transformation a throw exception
            when necesssary.
            </summary>
            <exception cref="T:TC.CustomTemplating.TextTransformationException">when an error has occured during transformation.</exception>
        </member>
        <member name="M:TC.CustomTemplating.Host.OnTemplateCompiled(TC.CustomTemplating.ClassDefinitionEventArgs)">
            <summary>
            Raises the ClassDefinitionGenerated event.
            </summary>
            <param name="eventArgs">The event argument containing the generated class.</param>
        </member>
        <member name="E:TC.CustomTemplating.Host.ClassDefinitionGenerated">
            <summary>
            Event raised when the template class definition is genereated.
            </summary>
        </member>
        <member name="P:TC.CustomTemplating.Host.Transformer">
            <summary>
            Gets the transformer.
            </summary>
            <value>The transformer.</value>
        </member>
        <member name="P:TC.CustomTemplating.Host.PathResolver">
            <summary>
            Gets the path resolver.
            </summary>
            <value>The path resolver.</value>
        </member>
        <member name="P:TC.CustomTemplating.Host.FileLoader">
            <summary>
            Gets the file loader.
            </summary>
            <value>The file loader.</value>
        </member>
        <member name="P:TC.CustomTemplating.Host.Errors">
            <summary>
            Gets the errors occured during last transformation.
            </summary>
            <value>The errors.</value>
        </member>
        <member name="P:TC.CustomTemplating.Host.StandardAssemblyReferences">
            <summary>
            Gets the standard assembly referenced to compile the template.
            </summary>
            <value>The standard assembly references.</value>
        </member>
        <member name="P:TC.CustomTemplating.Host.StandardImports">
            <summary>
            Gets the standard imports (usings) used to compile the template.
            </summary>
            <value>The standard imports.</value>
        </member>
        <member name="P:TC.CustomTemplating.Host.TemplateFile">
            <summary>
            Gets the template file.
            </summary>
            <value>The template file.</value>
        </member>
        <member name="T:TC.CustomTemplating.TemplateArgument">
            <summary>
            Named argument who's value can be passed to a template.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.TemplateArgument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TC.CustomTemplating.TemplateArgument"/> class.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.TemplateArgument.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TC.CustomTemplating.TemplateArgument"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:TC.CustomTemplating.TemplateArgument.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TC.CustomTemplating.TemplateArgument.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:TC.CustomTemplating.TemplateResources">
            <summary>
            Handles templates stored as Embedded Resource.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.TemplateResources.Get(System.String,System.Type)">
            <summary>
            Gets a template from an embedded resource.
            </summary>
            <param name="streamName">The fulle name of the stream.</param>
            <param name="type">
            A type that is located in the assembly wherin 
            the template is stored as embedded resource.
            </param>
            <exception cref="T:System.InvalidOperationException">When the stream is not found</exception>
            <returns>The template loaded from the embedded resource.</returns>
        </member>
        <member name="T:TC.CustomTemplating.ArgumentInfo">
            <summary>
            Holds information about an argument used during 
            initialization of transformation.
            </summary>
        </member>
        <member name="P:TC.CustomTemplating.ArgumentInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TC.CustomTemplating.ArgumentInfo.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:TC.CustomTemplating.ArgumentInfo.FieldName">
            <summary>
            Gets or sets the field name.
            </summary>
            <value>The field name.</value>
        </member>
        <member name="P:TC.CustomTemplating.ArgumentInfo.ConverterType">
            <summary>
            Gets or sets the type of the converter.
            </summary>
            <value>The type of the converter.</value>
        </member>
        <member name="P:TC.CustomTemplating.ArgumentInfo.EditorType">
            <summary>
            Gets or sets the type of the editor.
            </summary>
            <value>The type of the editor.</value>
        </member>
        <member name="T:TC.CustomTemplating.TemplateArgumentDirectiveProcessor">
            <summary>
            Custom T4 directive processor that makes the template arguments accessible
            from within the template. The argument are accesible through a
            generated property. The argument is initialized by asking the 
            host for the object by invoking the GetArgument method. There is
            is also a property generated called Host that allows to
            access the custom host.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.TemplateArgumentDirectiveProcessor.StartProcessingRun(System.CodeDom.Compiler.CodeDomProvider,System.String,System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Starts the processing run.
            </summary>
            <param name="languageProvider">The language provider.</param>
            <param name="templateContents">The template contents.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:TC.CustomTemplating.TemplateArgumentDirectiveProcessor.ProcessDirective(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Processes the directive.
            </summary>
            <param name="directiveName">Name of the directive.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:TC.CustomTemplating.TemplateArgumentDirectiveProcessor.GetClassCodeForProcessingRun">
            <summary>
            Generates the code that will be added to the generated template. For
            each argument a private field is generated that will hold the argument 
            value. Also a readonly public property is generated to access the argument 
            value. When a convertor of editor is defined there is a attribute genereted 
            for each of them.
            </summary>
            <returns>The fields and arguments</returns>
        </member>
        <member name="M:TC.CustomTemplating.TemplateArgumentDirectiveProcessor.GetPostInitializationCodeForProcessingRun">
            <summary>
            Gets the post initialization code for processing run. This will 
            generate a call to the GetArgument method of the host for each 
            private field generated. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.TemplateArgumentDirectiveProcessor.FinishProcessingRun">
            <summary>
            Finishes the processing run.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.TemplateArgumentDirectiveProcessor.GetImportsForProcessingRun">
            <summary>
            Gets the imports for processing run.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.TemplateArgumentDirectiveProcessor.GetPreInitializationCodeForProcessingRun">
            <summary>
            Gets the pre initialization code for processing run.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.TemplateArgumentDirectiveProcessor.GetReferencesForProcessingRun">
            <summary>
            Gets the references for processing run.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.TemplateArgumentDirectiveProcessor.IsDirectiveSupported(System.String)">
            <summary>
            Determines whether the directive with the specific name is supported.
            </summary>
            <param name="directiveName">Name of the directive.</param>
            <returns>
            	<c>true</c> always returns true.
            </returns>
        </member>
        <member name="M:TC.CustomTemplating.TemplateArgumentDirectiveProcessor.GetArgument(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Get the argument with the specified name.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.TemplateArgumentDirectiveProcessor.GetTypeArgument(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Gets a type argument and normalize it.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.TemplateArgumentDirectiveProcessor.NormalizeType(System.String)">
            <summary>
            Normalizes the type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:TC.CustomTemplating.TemplateArgumentDirectiveProcessor.CodeProvider">
            <summary>
            Gets the code provider.
            </summary>
            <value>The code provider.</value>
        </member>
        <member name="T:TC.CustomTemplating.StringExtensions">
            <summary>
            Extension methods defined for the string type.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.StringExtensions.FormatInvariant(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified System.String with the text equivalent of the value of a corresponding System.Object instance in a specified array. A specified parameter supplies culture-specific formatting information. 
            Invariant culture supplies culture-specific formatting information.
            </summary>
            <param name="value">A composite format string.</param>
            <param name="arguments">An System.Object array containing zero or more objects to format.</param>
            <returns>A copy of format in which the format items have been replaced by the System.String equivalent of the corresponding instances of System.Object in args.</returns>
            <exception cref="T:System.ArgumentNullException">format or args is null.</exception>
            <exception cref="T:System.FormatException">format is invalid.-or- The number indicating an argument to format is less than zero, or greater than or equal to the length of the args array.</exception>
        </member>
        <member name="T:TC.CustomTemplating.FileLoader">
            <summary>
            Responsible for loading the full content of a file.
            </summary>
        </member>
        <member name="T:TC.CustomTemplating.IFileLoader">
            <summary>
            Responsible for loading the full content of a file.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.IFileLoader.Load(System.String,System.String,System.String@,System.String@)">
            <summary>
            Loads the specified file name.
            </summary>
            <param name="requestFileName">Name of the request file.</param>
            <param name="hintPath">A hint path wherin the file is searched.</param>
            <param name="content">The content of the file when the loading succeeded. Null otherwise.</param>
            <param name="location">The location where the file is loaded. Null when file is not found.</param>
            <returns>True when the file was loaded successfully</returns>
        </member>
        <member name="M:TC.CustomTemplating.FileLoader.#ctor(TC.CustomTemplating.IPathResolver,TC.CustomTemplating.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:TC.CustomTemplating.FileLoader"/> class.
            </summary>
            <param name="resolver">The resolver.</param>
            <param name="fileSystem">The file system.</param>
        </member>
        <member name="M:TC.CustomTemplating.FileLoader.Load(System.String,System.String,System.String@,System.String@)">
            <summary>
            Loads the file with the file name when the file exists. The used filename is resolved
            by the FileResolver.
            </summary>
            <param name="requestFileName">Name of the request file.</param>
            <param name="hintPath">A hint path wherin the file is searched.</param>
            <param name="content">The content of the file when the loading succeeded. Null otherwise.</param>
            <param name="location">The location where the file is loaded. Null when file is not found.</param>
            <returns>
            True when the file was loaded successfully
            </returns>
        </member>
        <member name="P:TC.CustomTemplating.FileLoader.FileSystem">
            <summary>
            Gets the file system.
            </summary>
            <value>The file system.</value>
        </member>
        <member name="T:TC.CustomTemplating.PathResolver">
            <summary>
            Resolves the path for a given file name.  
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.PathResolver.#ctor(TC.CustomTemplating.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:TC.CustomTemplating.PathResolver"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
        </member>
        <member name="M:TC.CustomTemplating.PathResolver.ResolvePath(System.String,System.String)">
            <summary>
            Resolves the path.
            </summary>
            <param name="fileName">The path.</param>
            <param name="hintPath">The transformer path.</param>
            <returns></returns>
        </member>
        <member name="P:TC.CustomTemplating.PathResolver.FileSystem">
            <summary>
            Gets the file system.
            </summary>
            <value>The file system.</value>
        </member>
        <member name="T:TC.CustomTemplating.DomainTextTransformer">
            <summary>
            Represent a TextTransformer that will load the compiled templates in a 
            newly created AppDomain. When the DomainTextTransformer is disposed 
            the AppDomain is unloaded.
            </summary>
            <remarks>
            The transformation performed on the same DomainTextTransformer are synchronized. 
            </remarks>
        </member>
        <member name="M:TC.CustomTemplating.DomainTextTransformer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TC.CustomTemplating.DomainTextTransformer"/> class.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.DomainTextTransformer.#ctor(TC.CustomTemplating.IAppDomainManager,TC.CustomTemplating.ITextTransformerHost,Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:TC.CustomTemplating.DomainTextTransformer"/> class.
            </summary>
            <param name="appDomainManager">The app domain manager.</param>
            <param name="host">The host.</param>
            <param name="engine">The engine.</param>
        </member>
        <member name="M:TC.CustomTemplating.DomainTextTransformer.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:TC.CustomTemplating.DomainTextTransformer"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.DomainTextTransformer.Recycle">
            <summary>
            Recycles the domain wherein the transformations are preformed.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.DomainTextTransformer.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.DomainTextTransformer.StartTransformation(System.String,TC.CustomTemplating.TemplateArgumentCollection)">
            <summary>
            Start the transformation.
            </summary>
            <param name="template">The template.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
            <exception cref="T:TC.CustomTemplating.TextTransformationException">when an error has occured during transformation.</exception>
        </member>
        <member name="M:TC.CustomTemplating.DomainTextTransformer.AddAssemblyReference(System.Object)">
            <summary>
            Adds the assembly of the argument to the references.
            </summary>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:TC.CustomTemplating.DomainTextTransformer.CheckAutoRecycle">
            <summary>
            Checks the whther the domain need to be recycled.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.DomainTextTransformer.CreateNewDomain">
            <summary>
            Creates the new app-domain.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.DomainTextTransformer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, 
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.DomainTextTransformer.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:TC.CustomTemplating.DomainTextTransformer.AssemblyReferences">
            <summary>
            Gets the assembly references used to compile the templates.
            </summary>
            <value>The assembly references.</value>
        </member>
        <member name="P:TC.CustomTemplating.DomainTextTransformer.RecycleThreshold">
            <summary>
            Gets or sets the number of tranformations that are performed before the App-Domain is recycled.
            To enable the automatic recycling feature the AutoRecycle property should be set to true. The
            default number of transformations is 20.
            </summary>
            <value>The number of tranformations that are performed before the App-Domain is recycled.</value>
        </member>
        <member name="P:TC.CustomTemplating.DomainTextTransformer.AutoRecycle">
            <summary>
            Gets or sets whether the automatic recycling feature is enabled. Enabling this feature
            eshures that the App-Domain is automatically recycled after a predefined number of 
            transformations. The number of transformations is defined by the RecycleThreshold property. 
            By default default value is false.
            </summary>
            <value>Whether the App-Domain is automatically recycled after a predefined number of transformations.</value>
        </member>
        <member name="P:TC.CustomTemplating.DomainTextTransformer.AppDomain">
            <summary>
            Gets the app domain used for the transformation.
            </summary>
            <value></value>
        </member>
        <member name="T:TC.CustomTemplating.TextTransformationException">
            <summary>
            The exception that is thrown when a text transformation has failed.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.TextTransformationException.#ctor(System.String,System.CodeDom.Compiler.CompilerErrorCollection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TC.CustomTemplating.TextTransformationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="compilerErrorCollection">The compiler error collection.</param>
            <param name="templateClass">The template class.</param>
        </member>
        <member name="M:TC.CustomTemplating.TextTransformationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TC.CustomTemplating.TextTransformationException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:TC.CustomTemplating.TextTransformationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:TC.CustomTemplating.TextTransformationException.CompilationErrors">
            <summary>
            Gets the compiler error collection.
            </summary>
            <value>The compiler error collection.</value>
        </member>
        <member name="P:TC.CustomTemplating.TextTransformationException.TemplateClass">
            <summary>
            Gets the template class.
            </summary>
            <value>The template class.</value>
        </member>
        <member name="T:TC.CustomTemplating.Template">
            <summary>
            Static class that gives direct access to the Text Transformation functionality. 
            All transformations are performed within the current App-Domain.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.Template.Transform(System.String)">
            <summary>
            Transforms the specified template without using an argument.
            </summary>
            <param name="template">The template.</param>
            <exception cref="T:TC.CustomTemplating.TextTransformationException">Text transformation has failed.</exception>
            <exception cref="T:System.ArgumentNullException">template is null or empty.</exception>
            <returns>The output of the text transformation.</returns>
        </member>
        <member name="M:TC.CustomTemplating.Template.Transform(System.String,System.String,System.Object)">
            <summary>
            Transforms the specified template using a single named argument.
            </summary>
            <param name="template">The template.</param>
            <param name="argumentName">The argument name used to transform the text.</param>
            <param name="argumentValue">The argument value used to transform the text. Can be null.</param>
            <exception cref="T:TC.CustomTemplating.TextTransformationException">Text transformation has failed.</exception>
            <exception cref="T:System.ArgumentNullException">template is null or empty.</exception>
            <returns>The output of the text transformation.</returns>
        </member>
        <member name="M:TC.CustomTemplating.Template.Transform(System.String,TC.CustomTemplating.TemplateArgumentCollection)">
            <summary>
            Transforms the specified template using a dictionary of named arguments.
            </summary>
            <param name="template">The template.</param>
            <param name="arguments">A dictionary containing named arguments used to transform the text.</param>
            <exception cref="T:TC.CustomTemplating.TextTransformationException">Text transformation has failed.</exception>
            <exception cref="T:System.ArgumentNullException">template is null or empty.</exception>
            <returns>The output of the text transformation.</returns>
        </member>
        <member name="P:TC.CustomTemplating.Template.Path">
            <summary>
            Gets the path wherin the assemblies and or included templates can be found.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:TC.CustomTemplating.Template.AssemblyReferences">
            <summary>
            Gets the assembly references used to compile the templates.
            </summary>
            <value>The assembly references.</value>
        </member>
        <member name="P:TC.CustomTemplating.Template.TextTransformer">
            <summary>
            Gets and sets the used TextTransfomer.
            </summary>
            <value>The assembly references.</value>
        </member>
        <member name="T:TC.CustomTemplating.TemplateArgumentCollection">
            <summary>
            Collection that contains named template arguments.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.TemplateArgumentCollection.GetKeyForItem(TC.CustomTemplating.TemplateArgument)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="T:TC.CustomTemplating.FileSystem">
            <summary>
            Responsible for accessing the FileSystem.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.FileSystem.ReadAllText(System.String)">
            <summary>
            Reads all text from a text file.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.FileSystem.Combine(System.String,System.String)">
            <summary>
            Combines the specified path with the name.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.FileSystem.FileExists(System.String)">
            <summary>
            Returns whether the file exists.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.FileSystem.IsPathRooted(System.String)">
            <summary>
            Determines whether the path of the specified file is rooted.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TC.CustomTemplating.FileSystem.GetDirectoryName(System.String)">
            <summary>
            Gets the name of the directory.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="P:TC.CustomTemplating.FileSystem.EntryAssemblyLocation">
            <summary>
            Gets the location of the entry assembly.
            </summary>
            <value>The entry assembly location.</value>
        </member>
        <member name="T:TC.CustomTemplating.AssemblyExtensions">
            <summary>
            Extension methods for Assembly.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.AssemblyExtensions.IsDynamic(System.Reflection.Assembly)">
            <summary>
            Determines whether the specified assembly is dynamic.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>
            	<c>true</c> if the specified assembly is dynamic; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TC.CustomTemplating.ClassDefinitionEventArgs">
            <summary>
            Event arguments containing the generated template class definition.
            </summary>
        </member>
        <member name="M:TC.CustomTemplating.ClassDefinitionEventArgs.#ctor(System.String)">
            <summary>
            Initialize new ClassDefinitionEventArgs.
            </summary>
            <param name="classDefinition">The class definition.</param>
        </member>
        <member name="P:TC.CustomTemplating.ClassDefinitionEventArgs.ClassDefinition">
            <summary>
            Get the generated template class definition code.
            </summary>
        </member>
    </members>
</doc>
